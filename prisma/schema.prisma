// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// docker run --name hpdm -p 5111:5432 -e POSTGRES_PASSWORD=secret -d postgres
// npx prisma migrate dev --name init
// npx prisma db push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// HERE IT STARTS

enum Role {
  Staff
  Pacient
}

model users {
  id        Int      @id @default(autoincrement())
  idnp      String   @unique
  password  String
  role      Role
}

model Staff {
  id        Int      @id @default(autoincrement())
  name      String
  idnp      String   @unique
  email     String   @unique
  createdAt DateTime @default(now())

  details               StaffDetails?
  visit                 ClinicVisits[]
  writings              MedicalCardRecord[]
  files                 InvestigationFiles[]
  emitedRecipes         Recipe[]
  employeedAtClinic     ClinicEmployees[]
  employeedAtLaboratory LaboratoryEmployees[]
  employeedAtPharmacy   PharmacyEmployees[]
  closedRecipes         ClosedRecipes[]
  investigations        Investigation[]
}

model StaffDetails {
  id                    Int              @id @default(autoincrement())
  staffId               Int              @unique
  phoneNumber           String 
  dateOfBirth           DateTime
  gender                String?
  position              Position // require a separate table for flexibility, or remove this and use role table and field instead
  department            Departments // require a separate table for flexibility
  hireDate              DateTime?
  status                EmploymentStatus
  address               String?
  city                  String?
  district              String?
  postalCode            String?
  country               String?
  emergencyContactName  String? // person to contact in case of emergency
  emergencyContactPhone String? // phone number of the emergency contact
  description           String? // data will be stored as formatted html string
  qualifications        String? // data can be stored as formatted html string
  notes                 String? // optional notes

  staff Staff @relation(fields: [staffId], references: [id])
}

enum EmploymentStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  RETIRED
  PROBATION
  CONTRACT
  VACATION
  LEAVE_OF_ABSENCE
  OTHER
}

enum Departments {
  ADMINISTRATION
  HUMAN_RESOURCES
  LABORATORY
  CLINICS
  PHARMACY
  OTHER
}

enum Position {
  DOCTOR
  NURSE
  TECHNICIAN
  ADMINISTRATOR
  RECEPTIONIST
  PHARMACIST
  LABORATORY_TECHNICIAN
  CLEANER
  SECURITY
  DRIVER
  FAMILY_DOCTOR
  OTHER
}

model Clinic {
  id       Int    @id @default(autoincrement())
  name     String @unique
  address  String @unique
  city     String
  district String

  employees ClinicEmployees[]
  details   ClinicDetails?
  visits    ClinicVisits[]
  schedules Schedule[]        @relation("ClinicSchedules")
}

model ClinicEmployees {
  id       Int @id @default(autoincrement())
  clinicId Int @unique
  staffId  Int @unique

  clinic Clinic @relation(fields: [clinicId], references: [id])
  staff  Staff  @relation(fields: [staffId], references: [id])

  @@index([clinicId], name: "clinicEmployee_idx")
  @@index([staffId], name: "staffEmployee_idx")
}

model ClinicDetails {
  id                Int               @id @default(autoincrement())
  clinicId          Int               @unique
  phoneNumber       String
  email             String
  website           String
  openingHours      String
  services          Services[]
  specializations   Specializations[]
  numberOfEmployees Int
  numberOfStaff     Int
  notes             String?

  clinic Clinic @relation(fields: [clinicId], references: [id])
}

model ClinicVisits {
  id           Int      @id @default(autoincrement())
  pacientId    Int
  clinicId     Int
  staffId      Int
  date         DateTime
  reason       String // reason for the visit aka simptoms etc...
  diagnosis    String? // may be set dependiong on the visit reason
  treatment    String? // html formatted string
  prescription String? // html formatted string
  notes        String? // html formatted string

  pacient Pacient @relation(fields: [pacientId], references: [id])
  clinic  Clinic  @relation(fields: [clinicId], references: [id])
  staff   Staff   @relation(fields: [staffId], references: [id])
}

enum Services {
  CONSULTATION
  DIAGNOSTICS
  SURGERY
  VACCINATION
  PHYSIOTHERAPY
  LAB_TESTS
  IMAGING
  EMERGENCY_CARE
  MATERNITY_CARE
  PHARMACY
  MENTAL_HEALTH
  NUTRITION_AND_DIET
  REHABILITATION
  TELEMEDICINE
  HOME_HEALTH_CARE
  DENTAL_CARE
  PRIMARY_CARE
  SPECIALTY_CARE
}

enum Specializations {
  CARDIOLOGY
  DERMATOLOGY
  NEUROLOGY
  ORTHOPEDICS
  PEDIATRICS
  PSYCHIATRY
  RADIOLOGY
  ONCOLOGY
  GASTROENTEROLOGY
  UROLOGY
  GYNECOLOGY
  OPHTHALMOLOGY
  ENT
  PULMONOLOGY
  ENDOCRINOLOGY
  RHEUMATOLOGY
  ALLERGY_AND_IMMUNOLOGY
  FAMILY_MEDICINE
}

model Pacient {
  id          Int      @id @default(autoincrement())
  name        String
  idnp        String   @unique
  email       String   @unique
  phoneNumber String
  address     String?
  city        String?
  district    String?
  postalCode  String?
  country     String?
  createdAt   DateTime @default(now())

  details         PacientDetails?
  card            MedicalCard?
  visits          ClinicVisits[]
  recipes         Recipe[]
  closedRecipes   ClosedRecipes[]
  investigations  Investigation[]

  @@index([idnp], name: "idnp_idx")
	@@map("Pacient")
}

model PacientDetails {
  id                 Int      @id @default(autoincrement())
  pacientId          Int      @unique
  currentMedications String? // current medications, can be stored as formatted html string
  allergies          String? // allergies, can be stored as formatted html string
  notes              String? // optional notes
  updatedAt          DateTime @updatedAt

  pacient Pacient @relation(fields: [pacientId], references: [id])
	@@map("PacientDetails")
}

model MedicalCard {
  id        Int      @id @default(autoincrement())
  pacientId Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pacient Pacient             @relation(fields: [pacientId], references: [id])
  content MedicalCardRecord[]

  @@index([pacientId], name: "pacientCard_idx")
}

model MedicalCardRecord {
  id        Int      @id @default(autoincrement())
  cardId    Int
  date      DateTime @default(now())
  doctorId  Int
  diagnosis String
  treatment String? // html formatted string
  notes     String? // html formatted string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  card   MedicalCard          @relation(fields: [cardId], references: [id])
  doctor Staff                @relation(fields: [doctorId], references: [id])
  files  InvestigationFiles[]
}

model Laboratory {
  id       Int    @id @default(autoincrement())
  name     String
  address  String
  city     String
  district String

  services  Services[]
  employees LaboratoryEmployees[]
  schedules Schedule[]            @relation("LaboratorySchedules")
  investigations Investigation[]
}

model LaboratoryEmployees {
  id      Int @id @default(autoincrement())
  labId   Int
  staffId Int

  lab   Laboratory @relation(fields: [labId], references: [id])
  staff Staff      @relation(fields: [staffId], references: [id])
}

enum InvestigationType {
  BLOOD_ANALYSIS
  URINE_ANALYSIS
  STOOL_ANALYSIS
  BIOPSY
  IMAGING
  ECG
  EEG
  ECHO
  MRI
  CT_SCAN
  ULTRASOUND
  X_RAY
  ENDOSCOPY
  COLONOSCOPY
  OTHER
}

model Investigation {
  id          Int       @id @default(autoincrement())
  pacientId   Int       @unique
  labId       Int       @unique
  staffId     Int       @unique
  date        DateTime
  type        InvestigationType
  description String? // html formatted string
  notes       String? // html formatted string
  isDone      Boolean  @default(false)

  pacient Pacient     @relation(fields: [pacientId], references: [id])
  lab     Laboratory  @relation(fields: [labId], references: [id])
  staff   Staff       @relation(fields: [staffId], references: [id])
}

model InvestigationFiles {
  id        Int       @id @default(autoincrement())
  recordId  Int       @unique
  staffId   Int       @unique
  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  record    MedicalCardRecord @relation(fields: [recordId], references: [id])
  createdBy Staff             @relation(fields: [staffId], references: [id])
}

model Pharmacy {
  id       Int    @id @default(autoincrement())
  name     String
  address  String
  city     String
  district String

  employees PharmacyEmployees[]
}

model PharmacyEmployees {
  id         Int @id @default(autoincrement())
  pharmacyId Int
  staffId    Int

  pharmacy Pharmacy @relation(fields: [pharmacyId], references: [id])
  staff    Staff    @relation(fields: [staffId], references: [id])
}

model Recipe {
  id           Int      @id @default(autoincrement())
  pacientId    Int
  staffId      Int
  date         DateTime
  medicineName String // html formatted string
  quantity     Int
  measure      String
  instructions String? // html formatted string
  notes        String? // html formatted string
  isActive     Boolean  @default(true)

  pacient       Pacient         @relation(fields: [pacientId], references: [id])
  staff         Staff           @relation(fields: [staffId], references: [id])
  closedRecipes ClosedRecipes[]

  @@index([pacientId], name: "pacientRecipe_idx")
  @@index([staffId], name: "staffRecipe_idx")
  @@index([medicineName], name: "medicineNameRecipe_idx")
}

model ClosedRecipes {
  id           Int      @id @default(autoincrement())
  pacientId    Int
  staffId      Int
  recipeId     Int
  date         DateTime
  medicine     String
  soldQuantity Int
  measure      String
  notes        String?

  pacient Pacient @relation(fields: [pacientId], references: [id])
  staff   Staff   @relation(fields: [staffId], references: [id])
  recipe  Recipe  @relation(fields: [recipeId], references: [id])
}

enum LocationType {
  CLINIC
  LABORATORY
}

model Schedule {
  id           Int          @id @default(autoincrement())
  locationId   Int          @unique
  locationType LocationType
  pacientId    Int
  staffId      Int?
  date         DateTime
  reason       String // why the visit is scheduled
  notes        String?
  isCompleted  Boolean      @default(false)

  clinic     Clinic?     @relation("ClinicSchedules", fields: [locationId], references: [id], map: "ClinicLocationId_fkey")
  laboratory Laboratory? @relation("LaboratorySchedules", fields: [locationId], references: [id], map: "LaboratoryLocationId_fkey")

  @@index([locationType, locationId])
}
